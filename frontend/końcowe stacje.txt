Implementacja przystanków koncowych - szczególowy opis

1. W bazie danych (tabela stations):
```sql
CREATE TABLE stations (
    station_id SERIAL PRIMARY KEY,
    route_id INTEGER REFERENCES routes(route_id) ON DELETE CASCADE,
    seq_no INTEGER NOT NULL,
    name VARCHAR(100) NOT NULL,
    geom GEOMETRY(Point, 4326),
    stop_time_sec INTEGER DEFAULT 30,
    passengers_in INTEGER DEFAULT 0,
    passengers_out INTEGER DEFAULT 0,
    is_terminal BOOLEAN DEFAULT false,  -- Dodane pole is_terminal
    UNIQUE (route_id, seq_no)
);
```

2. W frontend/src/App.js - funkcja handleSaveRoute:
```javascript
const handleSaveRoute = async () => {
    if (!routeName || drawnCoords.length < 2) return alert('Minimum 2 przystanki');
    
    // Przygotuj przystanki w formacie GeoJSON
    const cleanStops = drawnStops.map((stop, index) => ({
        type: 'Feature',
        geometry: {
            type: 'Point',
            coordinates: [stop.geometry.coordinates[0], stop.geometry.coordinates[1]]
        },
        properties: {
            name: stop.properties.name || `Stop ${index + 1}`,
            stopTime: stop.properties.stopTime || 0,
            passengersIn: stop.properties.passengersIn || 0,
            passengersOut: stop.properties.passengersOut || 0,
            isTerminal: Boolean(stop.properties?.isTerminal)  // Konwersja na boolean
        }
    }));
    // ... reszta kodu
};
```

3. W App.js - komponent MapWithDrawing, popup dla przystanków:
```javascript
const createStopPopupContent = (props, stop) => {
    return `
        <div>
            <h3>Przystanek</h3>
            <input type="text" id="stop-name" value="${props.name || ''}" placeholder="Nazwa przystanku">
            <div>
                <label>
                    <input type="checkbox" id="is-terminal" ${props.isTerminal ? 'checked' : ''}>
                    Przystanek koncowy
                </label>
            </div>
            <div>
                <label>Czas postoju (s):</label>
                <input type="number" id="stop-time" value="${props.stopTime || 0}" min="0">
            </div>
            <div>
                <label>Pasazerowie wsiadajacy:</label>
                <input type="number" id="passengers-in" value="${props.passengersIn || 0}" min="0">
            </div>
            <div>
                <label>Pasazerowie wysiadajacy:</label>
                <input type="number" id="passengers-out" value="${props.passengersOut || 0}" min="0">
            </div>
            <button id="save-stop">Zapisz</button>
            <button id="delete-stop">Usun</button>
        </div>
    `;
};
```

4. W App.js - obsluga zdarzen dla popupu przystanku:
```javascript
layer.on('popupopen', () => {
    const saveButton = document.getElementById('save-stop');
    const deleteButton = document.getElementById('delete-stop');
    const nameInput = document.getElementById('stop-name');
    const isTerminalCheckbox = document.getElementById('is-terminal');
    const stopTimeInput = document.getElementById('stop-time');
    const passengersInInput = document.getElementById('passengers-in');
    const passengersOutInput = document.getElementById('passengers-out');

    if (saveButton) {
        saveButton.onclick = () => {
            const stopIndex = drawnStops.findIndex(s => 
                s.geometry.coordinates[0] === stop.geometry.coordinates[0] && 
                s.geometry.coordinates[1] === stop.geometry.coordinates[1]
            );

            if (stopIndex !== -1) {
                const updatedStop = {
                    ...drawnStops[stopIndex],
                    properties: {
                        ...drawnStops[stopIndex].properties,
                        name: nameInput.value,
                        isTerminal: isTerminalCheckbox.checked,
                        stopTime: parseInt(stopTimeInput.value) || 0,
                        passengersIn: parseInt(passengersInInput.value) || 0,
                        passengersOut: parseInt(passengersOutInput.value) || 0
                    }
                };
                
                const newStops = [...drawnStops];
                newStops[stopIndex] = updatedStop;
                setDrawnStops(newStops);
                
                // Aktualizuj wyglad markera
                if (isTerminalCheckbox.checked) {
                    layer.setIcon(terminalIcon);
                } else {
                    layer.setIcon(regularIcon);
                }
            }
            layer.closePopup();
        };
    }
});
```

5. W App.js - ikony dla przystanków:
```javascript
const regularIcon = L.divIcon({
    html: '??',
    className: 'stop-icon',
    iconSize: [20, 20]
});

const terminalIcon = L.divIcon({
    html: '??',
    className: 'stop-icon terminal',
    iconSize: [20, 20]
});
```

6. W backend/server.js - endpoint POST /routes:
```javascript
app.post('/routes', async (req, res) => {
    const { name, stops, segments, params } = req.body;
    const userId = req.auth.id;

    try {
        await db.tx(async t => {
            const route = await t.one(
                'INSERT INTO routes(user_id, name, params) VALUES($1, $2, $3) RETURNING route_id',
                [userId, name, params || {}]
            );

            // Dodawanie przystanków
            for (let i = 0; i < stops.length; i++) {
                const stop = stops[i];
                await t.none(
                    `INSERT INTO stations(
                        route_id, seq_no, name, geom, 
                        stop_time_sec, passengers_in, passengers_out, 
                        is_terminal
                    ) VALUES (
                        $1, $2, $3, ST_SetSRID(ST_MakePoint($4, $5), 4326), 
                        $6, $7, $8, $9
                    )`,
                    [
                        route.route_id,
                        i + 1,
                        stop.properties.name,
                        stop.geometry.coordinates[0],
                        stop.geometry.coordinates[1],
                        stop.properties.stopTime || 0,
                        stop.properties.passengersIn || 0,
                        stop.properties.passengersOut || 0,
                        Boolean(stop.properties.isTerminal)
                    ]
                );
            }
        });
        
        res.status(201).send('Route created');
    } catch (err) {
        console.error('Error creating route:', err);
        res.status(500).json({ error: err.message });
    }
});
```

7. W backend/server.js - endpoint GET /routes:
```javascript
app.get('/routes', async (req, res) => {
    try {
        const routes = await db.any(`
            WITH route_data AS (
                SELECT 
                    r.route_id,
                    r.name,
                    r.params,
                    json_agg(
                        json_build_object(
                            'type', 'Feature',
                            'geometry', ST_AsGeoJSON(s.geom)::json,
                            'properties', json_build_object(
                                'name', s.name,
                                'stopTime', s.stop_time_sec,
                                'passengersIn', s.passengers_in,
                                'passengersOut', s.passengers_out,
                                'isTerminal', s.is_terminal
                            )
                        ) ORDER BY s.seq_no
                    ) as stops
                FROM routes r
                LEFT JOIN stations s ON r.route_id = s.route_id
                GROUP BY r.route_id
            )
            SELECT * FROM route_data
        `);
        
        res.json(routes);
    } catch (err) {
        console.error('Error fetching routes:', err);
        res.status(500).send('Failed to fetch routes');
    }
});
```

Glówne zmiany:
1. Dodanie pola is_terminal w bazie danych
2. Obsluga checkbox'a w popupie przystanku
3. Rózne ikony dla przystanków zwyklych (??) i koncowych (??)
4. Zapisywanie i wczytywanie informacji o przystankach koncowych
5. Konwersja wartosci isTerminal na typ boolean w obu kierunkach

Funkcjonalnosci:
- Oznaczanie przystanków jako koncowe
- Wizualne rozróznienie przystanków koncowych
- Przechowywanie tej informacji w bazie danych
- Poprawne wczytywanie statusu przystanku przy ponownym otwarciu trasy 